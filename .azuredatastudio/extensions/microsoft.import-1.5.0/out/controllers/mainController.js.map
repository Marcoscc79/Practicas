{"version":3,"file":"mainController.js","sourceRoot":"../../src","sources":["controllers/mainController.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,iDAAiD;AACjD,iCAAiC;AACjC,qDAA8C;AAC9C,iCAAiC;AACjC,6DAA0D;AAC1D,6DAA0D;AAC1D,qEAAyE;AAGzE;;GAEG;AACH,MAAqB,cAAe,SAAQ,wBAAc;IAGzD,YACC,OAAgC;QAEhC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAChF,CAAC;IACD;OACG;IACI,UAAU;IACjB,CAAC;IAEM,KAAK,CAAC,QAAQ;QACpB,MAAM,2BAA2B,GAAG,IAAI,OAAO,CAAU,KAAK,EAAE,OAAO,EAAE,EAAE;YAC1E,mCAAe,CAAC,eAAe,CAAmB,2BAAO,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,EAAE;gBACtF,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;gBAC1C,OAAO,CAAC,IAAI,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,MAAM,aAAa,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC7D,MAAM,mBAAmB,GAAG,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEtE,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,2BAA2B,EAAE,mBAAmB,CAAC,CAAC,CAAC;IACvE,CAAC;IAIO,0BAA0B,CAAC,QAA0B;QAC5D,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,0BAA0B,EAAE,CAAC,OAAkC,EAAE,GAAG,IAAW,EAAE,EAAE,CAAC,IAAI,+BAAc,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IAC5K,CAAC;CACD;AAhCD,iCAgCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as constants from '../common/constants';\nimport * as azdata from 'azdata';\nimport ControllerBase from './controllerBase';\nimport * as vscode from 'vscode';\nimport { FlatFileWizard } from '../wizard/flatFileWizard';\nimport { ServiceClient } from '../services/serviceClient';\nimport { ApiType, managerInstance } from '../services/serviceApiManager';\nimport { FlatFileProvider } from '../services/contracts';\n\n/**\n * The main controller class that initializes the extension\n */\nexport default class MainController extends ControllerBase {\n\tprivate _outputChannel: vscode.OutputChannel;\n\n\tpublic constructor(\n\t\tcontext: vscode.ExtensionContext,\n\t) {\n\t\tsuper(context);\n\t\tthis._outputChannel = vscode.window.createOutputChannel(constants.serviceName);\n\t}\n\t/**\n\t */\n\tpublic deactivate(): void {\n\t}\n\n\tpublic async activate(): Promise<void> {\n\t\tconst registerFileProviderPromise = new Promise<boolean>(async (resolve) => {\n\t\t\tmanagerInstance.onRegisteredApi<FlatFileProvider>(ApiType.FlatFileProvider)(provider => {\n\t\t\t\tthis.initializeFlatFileProvider(provider);\n\t\t\t\tresolve(true);\n\t\t\t});\n\t\t});\n\t\tconst serviceClient = new ServiceClient(this._outputChannel);\n\t\tconst serviceStartPromise = serviceClient.startService(this._context);\n\n\t\tawait Promise.all([registerFileProviderPromise, serviceStartPromise]);\n\t}\n\n\n\n\tprivate initializeFlatFileProvider(provider: FlatFileProvider) {\n\t\tazdata.tasks.registerTask(constants.flatFileImportStartCommand, (profile: azdata.IConnectionProfile, ...args: any[]) => new FlatFileWizard(provider).start(profile, args));\n\t}\n}\n"]}