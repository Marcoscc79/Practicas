{"version":3,"file":"contracts.js","sourceRoot":"../../src","sources":["services/contracts.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,iEAAsE;AAMtE,gGAAgG;AAEhG;;GAEG;AACH,IAAiB,qBAAqB,CAErC;AAFD,WAAiB,qBAAqB;IACxB,0BAAI,GAAG,IAAI,wCAAgB,CAAwB,oBAAoB,CAAC,CAAC;AACvF,CAAC,EAFgB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAErC;AAED;;GAEG;AACH,MAAa,eAAe;CAM3B;AAND,0CAMC;AAyBD;;;GAGG;AACH,MAAM,8BAA8B,GAAG,8BAA8B,CAAC;AAatE;;;EAGE;AACF,MAAM,6BAA6B,GAAG,6BAA6B,CAAC;AAWpE;;;GAGG;AACH,MAAM,yBAAyB,GAAG,yBAAyB,CAAC;AAc5D;;GAEG;AACH,MAAM,qBAAqB,GAAG,qBAAqB,CAAC;AAiBpD;;GAEG;AACH,MAAM,wBAAwB,GAAG,wBAAwB,CAAC;AAU1D;;GAEG;AACH,MAAM,+BAA+B,GAAG,+BAA+B,CAAC;AAcxE;;GAEG;AACH,IAAiB,qBAAqB,CAErC;AAFD,WAAiB,qBAAqB;IACxB,0BAAI,GAAG,IAAI,mCAAW,CAA2D,yBAAyB,CAAC,CAAC;AAC1H,CAAC,EAFgB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAErC;AAED,IAAiB,iBAAiB,CAEjC;AAFD,WAAiB,iBAAiB;IACpB,sBAAI,GAAG,IAAI,mCAAW,CAAmD,qBAAqB,CAAC,CAAC;AAC9G,CAAC,EAFgB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAEjC;AAED,IAAiB,oBAAoB,CAEpC;AAFD,WAAiB,oBAAoB;IACvB,yBAAI,GAAG,IAAI,mCAAW,CAAyD,wBAAwB,CAAC,CAAC;AACvH,CAAC,EAFgB,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAEpC;AAED,IAAiB,2BAA2B,CAE3C;AAFD,WAAiB,2BAA2B;IAC9B,gCAAI,GAAG,IAAI,mCAAW,CAAuE,+BAA+B,CAAC,CAAC;AAC5I,CAAC,EAFgB,2BAA2B,GAA3B,mCAA2B,KAA3B,mCAA2B,QAE3C;AAED,IAAiB,0BAA0B,CAE1C;AAFD,WAAiB,0BAA0B;IAC7B,+BAAI,GAAG,IAAI,mCAAW,CAAqE,8BAA8B,CAAC,CAAC;AACzI,CAAC,EAFgB,0BAA0B,GAA1B,kCAA0B,KAA1B,kCAA0B,QAE1C;AAED,IAAiB,yBAAyB,CAEzC;AAFD,WAAiB,yBAAyB;IAC5B,8BAAI,GAAG,IAAI,mCAAW,CAAmE,6BAA6B,CAAC,CAAC;AACtI,CAAC,EAFgB,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAEzC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RequestType, NotificationType } from 'vscode-languageclient';\n\nexport interface IMessage {\n\tjsonrpc: string;\n}\n\n// ------------------------------- < Telemetry Sent Event > ------------------------------------\n\n/**\n * Event sent when the language service send a telemetry event\n */\nexport namespace TelemetryNotification {\n\texport const type = new NotificationType<TelemetryParams, void>('telemetry/sqlevent');\n}\n\n/**\n * Update event parameters\n */\nexport class TelemetryParams {\n\tpublic params: {\n\t\teventName: string;\n\t\tproperties: ITelemetryEventProperties;\n\t\tmeasures: ITelemetryEventMeasures;\n\t};\n}\n\nexport interface ITelemetryEventProperties {\n\t[key: string]: string;\n}\n\nexport interface ITelemetryEventMeasures {\n\t[key: string]: number;\n}\n\n/**\n * Contract Classes\n */\nexport interface Result {\n\tsuccess: boolean;\n\terrorMessage: string;\n}\n\nexport interface ColumnInfo {\n\tname: string;\n\tsqlType: string;\n\tisNullable: boolean;\n}\n\n\n/**\n * LearnTransformationRequest\n * Send this request to learn a transformation and preview it\n */\nconst learnTransformationRequestName = 'flatfile/learnTransformation';\n\nexport interface LearnTransformationParams {\n\tcolumnNames: string[];\n\ttransformationExamples: string[];\n\ttransformationExampleRowIndices: number[];\n}\n\nexport interface LearnTransformationResponse {\n\ttransformationPreview: string[];\n}\n\n\n/**\n* SaveTransformationRequest\n* Send this request to save a transformation to be applied on insertion into database\n*/\nconst saveTransformationRequestName = 'flatfile/saveTransformation';\n\nexport interface SaveTransformationParams {\n\tderivedColumnName: string;\n}\n\nexport interface SaveTransformationResponse {\n\tnumTransformations: number;\n}\n\n\n/**\n * PROSEDiscoveryRequest\n * Send this request to create a new PROSE session with a new file and preview it\n */\nconst proseDiscoveryRequestName = 'flatfile/proseDiscovery';\n\nexport interface PROSEDiscoveryParams {\n\tfilePath: string;\n\ttableName: string;\n\tschemaName?: string;\n\tfileType?: string;\n}\n\nexport interface PROSEDiscoveryResponse {\n\tdataPreview: string[][];\n\tcolumnInfo: ColumnInfo[];\n}\n\n/**\n * InsertDataRequest\n */\nconst insertDataRequestName = 'flatfile/insertData';\n\nexport interface InsertDataParams {\n\tconnectionString: string;\n\tbatchSize: number;\n\t/**\n\t * For azure MFA connections we need to send the account token to establish a connection\n\t * from flatFile service without doing Oauth.\n\t */\n\tazureAccessToken: string | undefined;\n}\n\nexport interface InsertDataResponse {\n\tresult: Result;\n}\n\n\n/**\n * GetColumnInfoRequest\n */\nconst getColumnInfoRequestName = 'flatfile/getColumnInfo';\n\nexport interface GetColumnInfoParams {\n}\n\nexport interface GetColumnInfoResponse {\n\tcolumnInfo: ColumnInfo[];\n}\n\n\n/**\n * ChangeColumnSettingsRequest\n */\nconst changeColumnSettingsRequestName = 'flatfile/changeColumnSettings';\n\nexport interface ChangeColumnSettingsParams {\n\tindex: number;\n\tnewName?: string;\n\tnewDataType?: string;\n\tnewNullable?: boolean;\n\tnewInPrimaryKey?: boolean;\n}\n\nexport interface ChangeColumnSettingsResponse {\n\tresult: Result;\n}\n\n/**\n * Requests\n */\nexport namespace PROSEDiscoveryRequest {\n\texport const type = new RequestType<PROSEDiscoveryParams, PROSEDiscoveryResponse, void, void>(proseDiscoveryRequestName);\n}\n\nexport namespace InsertDataRequest {\n\texport const type = new RequestType<InsertDataParams, InsertDataResponse, void, void>(insertDataRequestName);\n}\n\nexport namespace GetColumnInfoRequest {\n\texport const type = new RequestType<GetColumnInfoParams, GetColumnInfoResponse, void, void>(getColumnInfoRequestName);\n}\n\nexport namespace ChangeColumnSettingsRequest {\n\texport const type = new RequestType<ChangeColumnSettingsParams, ChangeColumnSettingsResponse, void, void>(changeColumnSettingsRequestName);\n}\n\nexport namespace LearnTransformationRequest {\n\texport const type = new RequestType<LearnTransformationParams, LearnTransformationResponse, void, void>(learnTransformationRequestName);\n}\n\nexport namespace SaveTransformationRequest {\n\texport const type = new RequestType<SaveTransformationParams, SaveTransformationResponse, void, void>(saveTransformationRequestName);\n}\n\n\nexport interface FlatFileProvider {\n\tproviderId?: string;\n\n\tsendPROSEDiscoveryRequest(params: PROSEDiscoveryParams): Thenable<PROSEDiscoveryResponse>;\n\tsendInsertDataRequest(params: InsertDataParams): Thenable<InsertDataResponse>;\n\tsendGetColumnInfoRequest(params: GetColumnInfoParams): Thenable<GetColumnInfoResponse>;\n\tsendChangeColumnSettingsRequest(params: ChangeColumnSettingsParams): Thenable<ChangeColumnSettingsResponse>;\n\tsendLearnTransformationRequest(params: LearnTransformationParams): Thenable<LearnTransformationResponse>;\n\tsendSaveTransformationRequest(params: SaveTransformationParams): Thenable<SaveTransformationResponse>;\n}\n"]}