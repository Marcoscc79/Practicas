{"version":3,"file":"serviceApiManager.js","sourceRoot":"../../src","sources":["services/serviceApiManager.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,iCAAiC;AAEjC,IAAY,OAEX;AAFD,WAAY,OAAO;IAClB,gDAAqC,CAAA;AACtC,CAAC,EAFW,OAAO,GAAP,eAAO,KAAP,eAAO,QAElB;AAYD,MAAM,iBAAiB;IAAvB;QACS,yBAAoB,GAAiD,EAAE,CAAC;QACxE,2BAAsB,GAAG,IAAI,MAAM,CAAC,YAAY,EAAwB,CAAC;IAgClF,CAAC;IA9BO,eAAe,CAAI,IAAa;QACtC,IAAI,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,cAAc,EAAE;YACpB,cAAc,GAAG,IAAI,MAAM,CAAC,YAAY,EAAK,CAAC;YAC9C,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC;SACjD;QACD,OAAO,cAAc,CAAC,KAAK,CAAC;IAC7B,CAAC;IAEM,WAAW,CAAI,IAAa,EAAE,OAAU;QAC9C,IAAI,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,cAAc,EAAE;YACnB,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC7B;QACD,yCAAyC;QACzC,OAAO;YACN,OAAO,EAAE,GAAG,EAAE,CAAC,SAAS;SACxB,CAAC;IACH,CAAC;IAED,IAAW,qBAAqB;QAC/B,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC;IAC1C,CAAC;IAEM,iBAAiB,CAAC,EAAU,EAAE,SAA2B;QAC/D,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC;YAChC,EAAE,EAAE,EAAE;YACN,SAAS,EAAE,SAAS;SACpB,CAAC,CAAC;IACJ,CAAC;CACD;AAEU,QAAA,eAAe,GAAG,IAAI,iBAAiB,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as azdata from 'azdata';\nimport * as vscode from 'vscode';\n\nexport enum ApiType {\n\tFlatFileProvider = 'FlatFileProvider'\n}\n\ninterface IServiceApi {\n\tonRegisteredApi<T>(type: ApiType): vscode.Event<T>;\n\tregisterApi<T>(type: ApiType, feature: T): vscode.Disposable;\n}\n\ninterface IModelViewDefinition {\n\tid: string;\n\tmodelView: azdata.ModelView;\n}\n\nclass ServiceApiManager implements IServiceApi {\n\tprivate featureEventChannels: { [type: string]: vscode.EventEmitter<any> } = {};\n\tprivate _onRegisteredModelView = new vscode.EventEmitter<IModelViewDefinition>();\n\n\tpublic onRegisteredApi<T>(type: ApiType): vscode.Event<T> {\n\t\tlet featureEmitter = this.featureEventChannels[type];\n\t\tif (!featureEmitter) {\n\t\t\tfeatureEmitter = new vscode.EventEmitter<T>();\n\t\t\tthis.featureEventChannels[type] = featureEmitter;\n\t\t}\n\t\treturn featureEmitter.event;\n\t}\n\n\tpublic registerApi<T>(type: ApiType, feature: T): vscode.Disposable {\n\t\tlet featureEmitter = this.featureEventChannels[type];\n\t\tif (featureEmitter) {\n\t\t\tfeatureEmitter.fire(feature);\n\t\t}\n\t\t// TODO handle unregistering API on close\n\t\treturn {\n\t\t\tdispose: () => undefined\n\t\t};\n\t}\n\n\tpublic get onRegisteredModelView(): vscode.Event<IModelViewDefinition> {\n\t\treturn this._onRegisteredModelView.event;\n\t}\n\n\tpublic registerModelView(id: string, modelView: azdata.ModelView): void {\n\t\tthis._onRegisteredModelView.fire({\n\t\t\tid: id,\n\t\t\tmodelView: modelView\n\t\t});\n\t}\n}\n\nexport let managerInstance = new ServiceApiManager();\n"]}