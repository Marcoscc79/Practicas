{"version":3,"file":"telemetry.js","sourceRoot":"../../src","sources":["services/telemetry.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,iEAAiE;AACjE,2EAA2D;AAC3D,iCAAiC;AAEjC,iDAAiD;AAIjD;;GAEG;AACH,MAAa,0BAA0B;IAEtC;;;OAGG;IACH;IAEA,CAAC;IAED;;;OAGG;IACH,iBAAiB;QAChB,qBAAqB;QACrB,wDAAwD;QACxD,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAC7B,SAAS,CAAC,uBAAuB,EACjC,SAAS,CAAC,eAAe,CACzB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACf,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,CAAC,eAAe,EAAE;gBACnD,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;aACtE;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,KAAY,EAAE,OAAiB,EAAE,KAAa;QACnD,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,uEAAuE;QACvE,8BAA8B;QAC9B,OAAO,mCAAW,CAAC,QAAQ,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,MAAM;QACL,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEzB,uEAAuE;QACvE,8BAA8B;QAC9B,OAAO,mCAAW,CAAC,YAAY,CAAC;IACjC,CAAC;CACD;AApDD,gEAoDC;AAID,MAAa,SAAS;IAIrB;;OAEG;IACI,MAAM,CAAC,OAAO;QACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACtB,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,UAAU;QACvB,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,WAAW,EAAE;YACzC,+CAA+C;YAC/C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,GAAG,CAAU,iBAAiB,EAAE,IAAI,CAAC,EAAE;gBAC1F,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,OAAO;aACP;YACD,IAAI,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,WAAW,CAAC;YACjF,IAAI,CAAC,QAAQ,GAAG,IAAI,oCAAiB,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;SAChG;IACF,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,kBAAkB,CAC/B,SAAiB,EACjB,UAAsC,EACtC,QAAkC;QAElC,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,WAAW,EAAE;YACzC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACtB;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EAAE;YAC5D,6CAA6C;YAC7C,OAAO;SACP;QAED,IAAI,CAAC,UAAU,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;YACrD,UAAU,GAAG,EAAE,CAAC;SAChB;QAED,IAAI;YACH,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;SAClE;QAAC,OAAO,YAAY,EAAE;YACtB,6EAA6E;YAC7E,OAAO,CAAC,KAAK,CAAC,yCAAyC,GAAG,YAAY,CAAC,CAAC;SACxE;IACF,CAAC;CACD;AAtDD,8BAsDC;AAED,SAAS,CAAC,UAAU,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ErrorAction, CloseAction } from 'vscode-languageclient';\nimport TelemetryReporter from 'vscode-extension-telemetry';\nimport * as vscode from 'vscode';\n\nimport * as constants from '../common/constants';\nimport { IMessage, ITelemetryEventProperties, ITelemetryEventMeasures } from './contracts';\n\n\n/**\n * Handle Language Service client errors\n */\nexport class LanguageClientErrorHandler {\n\n\t/**\n\t * Creates an instance of LanguageClientErrorHandler.\n\t * @memberOf LanguageClientErrorHandler\n\t */\n\tconstructor() {\n\n\t}\n\n\t/**\n\t * Show an error message prompt with a link to known issues wiki page\n\t * @memberOf LanguageClientErrorHandler\n\t */\n\tshowOnErrorPrompt(): void {\n\t\t// TODO add telemetry\n\t\t// Telemetry.sendTelemetryEvent('SqlToolsServiceCrash');\n\t\tvscode.window.showErrorMessage(\n\t\t\tconstants.serviceCrashMessageText,\n\t\t\tconstants.crashButtonText\n\t\t).then(action => {\n\t\t\tif (action && action === constants.crashButtonText) {\n\t\t\t\tvscode.env.openExternal(vscode.Uri.parse(constants.serviceCrashLink));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Callback for language service client error\n\t *\n\t * @memberOf LanguageClientErrorHandler\n\t */\n\terror(error: Error, message: IMessage, count: number): ErrorAction {\n\t\tthis.showOnErrorPrompt();\n\n\t\t// we don't retry running the service since crashes leave the extension\n\t\t// in a bad, unrecovered state\n\t\treturn ErrorAction.Shutdown;\n\t}\n\n\t/**\n\t * Callback for language service client closed\n\t *\n\t * @memberOf LanguageClientErrorHandler\n\t */\n\tclosed(): CloseAction {\n\t\tthis.showOnErrorPrompt();\n\n\t\t// we don't retry running the service since crashes leave the extension\n\t\t// in a bad, unrecovered state\n\t\treturn CloseAction.DoNotRestart;\n\t}\n}\n\n\n\nexport class Telemetry {\n\tprivate static reporter: TelemetryReporter;\n\tprivate static disabled: boolean;\n\n\t/**\n\t * Disable telemetry reporting\n\t */\n\tpublic static disable(): void {\n\t\tthis.disabled = true;\n\t}\n\n\t/**\n\t * Initialize the telemetry reporter for use.\n\t */\n\tpublic static initialize(): void {\n\t\tif (typeof this.reporter === 'undefined') {\n\t\t\t// Check if the user has opted out of telemetry\n\t\t\tif (!vscode.workspace.getConfiguration('telemetry').get<boolean>('enableTelemetry', true)) {\n\t\t\t\tthis.disable();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet packageInfo = vscode.extensions.getExtension('Microsoft.import').packageJSON;\n\t\t\tthis.reporter = new TelemetryReporter(packageInfo.name, packageInfo.version, packageInfo.aiKey);\n\t\t}\n\t}\n\n\t/**\n\t * Send a telemetry event using application insights\n\t */\n\tpublic static sendTelemetryEvent(\n\t\teventName: string,\n\t\tproperties?: ITelemetryEventProperties,\n\t\tmeasures?: ITelemetryEventMeasures): void {\n\n\t\tif (typeof this.disabled === 'undefined') {\n\t\t\tthis.disabled = false;\n\t\t}\n\n\t\tif (this.disabled || typeof (this.reporter) === 'undefined') {\n\t\t\t// Don't do anything if telemetry is disabled\n\t\t\treturn;\n\t\t}\n\n\t\tif (!properties || typeof properties === 'undefined') {\n\t\t\tproperties = {};\n\t\t}\n\n\t\ttry {\n\t\t\tthis.reporter.sendTelemetryEvent(eventName, properties, measures);\n\t\t} catch (telemetryErr) {\n\t\t\t// If sending telemetry event fails ignore it so it won't break the extension\n\t\t\tconsole.error('Failed to send telemetry event. error: ' + telemetryErr);\n\t\t}\n\t}\n}\n\nTelemetry.initialize();\n"]}