{"version":3,"file":"index.js","sourceRoot":"../../src","sources":["test/index.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;AAEhG,6BAA6B;AAC7B,MAAM,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAE9C,MAAM,KAAK,GAAG,wBAAwB,CAAC;AAEvC,MAAM,YAAY,GAAQ;IACzB,EAAE,EAAE,KAAK;IACT,SAAS,EAAE,IAAI;IACf,OAAO,EAAE,KAAK;CACd,CAAC;AAEF,kDAAkD;AAClD,IAAI,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE;IAC9B,YAAY,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC;IAC9C,OAAO,CAAC,GAAG,CAAC,4BAA4B,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;CAC7D;AACD,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE;IACrC,YAAY,CAAC,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACjE,OAAO,CAAC,GAAG,CAAC,8BAA8B,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;CACjE;AACD,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE;IACjC,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC9D,OAAO,CAAC,GAAG,CAAC,+BAA+B,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC;CACnE;AACD,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE;IACjC,YAAY,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC9D,OAAO,CAAC,GAAG,CAAC,+BAA+B,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC;CACnE;AAED,IAAI,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE;IAC/C,YAAY,CAAC,QAAQ,GAAG,uBAAuB,CAAC;IAChD,YAAY,CAAC,eAAe,GAAG;QAC9B,eAAe,EAAE,4BAA4B;QAC7C,iCAAiC,EAAE;YAClC,eAAe,EAAE,GAAG,KAAK,IAAI,OAAO,CAAC,QAAQ,EAAE;YAC/C,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,gBAAgB,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,cAAc,CAAC;SAC9J;KACD,CAAC;CACF;AAED,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,WAAW,EAAE,wBAAwB,EAAE,CAAC,CAAC;AAE9E,iBAAS,UAAU,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nconst testRunner = require('vscodetestcover');\n\nconst suite = 'import Extension Tests';\n\nconst mochaOptions: any = {\n\tui: 'bdd',\n\tuseColors: true,\n\ttimeout: 10000\n};\n\n// set relevant mocha options from the environment\nif (process.env.ADS_TEST_GREP) {\n\tmochaOptions.grep = process.env.ADS_TEST_GREP;\n\tconsole.log(`setting options.grep to: ${mochaOptions.grep}`);\n}\nif (process.env.ADS_TEST_INVERT_GREP) {\n\tmochaOptions.invert = parseInt(process.env.ADS_TEST_INVERT_GREP);\n\tconsole.log(`setting options.invert to: ${mochaOptions.invert}`);\n}\nif (process.env.ADS_TEST_TIMEOUT) {\n\tmochaOptions.timeout = parseInt(process.env.ADS_TEST_TIMEOUT);\n\tconsole.log(`setting options.timeout to: ${mochaOptions.timeout}`);\n}\nif (process.env.ADS_TEST_RETRIES) {\n\tmochaOptions.retries = parseInt(process.env.ADS_TEST_RETRIES);\n\tconsole.log(`setting options.retries to: ${mochaOptions.retries}`);\n}\n\nif (process.env.BUILD_ARTIFACTSTAGINGDIRECTORY) {\n\tmochaOptions.reporter = 'mocha-multi-reporters';\n\tmochaOptions.reporterOptions = {\n\t\treporterEnabled: 'spec, mocha-junit-reporter',\n\t\tmochaJunitReporterReporterOptions: {\n\t\t\ttestsuitesTitle: `${suite} ${process.platform}`,\n\t\t\tmochaFile: path.join(process.env.BUILD_ARTIFACTSTAGINGDIRECTORY, `test-results/${process.platform}-${suite.toLowerCase().replace(/[^\\w]/g, '-')}-results.xml`)\n\t\t}\n\t};\n}\n\ntestRunner.configure(mochaOptions, { coverConfig: '../../coverConfig.json' });\n\nexport = testRunner;\n"]}