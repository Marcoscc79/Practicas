{"version":3,"file":"utils.test.js","sourceRoot":"../../src","sources":["test/utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as azdata from 'azdata';\nimport * as vscode from 'vscode';\nimport { ImportDataModel, ColumnMetadata } from '../wizard/api/models';\nimport { FlatFileProvider, PROSEDiscoveryParams, InsertDataParams, GetColumnInfoParams, ChangeColumnSettingsParams, PROSEDiscoveryResponse, InsertDataResponse, ChangeColumnSettingsResponse, GetColumnInfoResponse, LearnTransformationParams, LearnTransformationResponse, SaveTransformationParams, SaveTransformationResponse } from '../services/contracts';\n\nexport class ImportTestUtils {\n\n\tpublic static getTestServer(): azdata.connection.Connection {\n\t\treturn {\n\t\t\tproviderName: 'MSSQL',\n\t\t\tconnectionId: 'testConnection2Id',\n\t\t\toptions: {}\n\t\t};\n\t}\n\n\tpublic static getTestConnectionProfile(): azdata.connection.ConnectionProfile {\n\t\treturn {\n\t\t\tproviderId: 'InvalidProvider',\n\t\t\tdatabaseName: 'databaseName',\n\t\t\tserverName: 'testServerName',\n\t\t\tconnectionId: 'testConnectionId',\n\t\t\tgroupId: 'testGroupId',\n\t\t\tconnectionName: 'testConnectionName',\n\t\t\tuserName: 'testUserName',\n\t\t\tpassword: 'testPassword',\n\t\t\tauthenticationType: 'testAuthenticationType',\n\t\t\tsavePassword: true,\n\t\t\tsaveProfile: true,\n\t\t\tgroupFullName: 'testGroupFullName',\n\t\t\toptions: {}\n\t\t} as azdata.connection.ConnectionProfile;\n\t}\n\n\tpublic static async getExtensionPath(): Promise<string> {\n\t\treturn await vscode.extensions.getExtension('Microsoft.import').extensionPath;\n\t}\n\n\tpublic static async getTestExtensionContext(): Promise<TestExtensionContext> {\n\t\tlet testContext = new TestExtensionContext();\n\t\ttestContext.extensionPath = await vscode.extensions.getExtension('Microsoft.import').extensionPath;\n\t\treturn testContext;\n\t}\n}\n\nexport class TestQueryProvider implements azdata.QueryProvider {\n\tcancelQuery(ownerUri: string): Thenable<azdata.QueryCancelResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\trunQuery(ownerUri: string, selection: azdata.ISelectionData, runOptions?: azdata.ExecutionPlanOptions): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\trunQueryStatement(ownerUri: string, line: number, column: number): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\trunQueryString(ownerUri: string, queryString: string): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\trunQueryAndReturn(ownerUri: string, queryString: string): Thenable<azdata.SimpleExecuteResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tparseSyntax(ownerUri: string, query: string): Thenable<azdata.SyntaxParseResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetQueryRows(rowData: azdata.QueryExecuteSubsetParams): Thenable<azdata.QueryExecuteSubsetResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdisposeQuery(ownerUri: string): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tconnectionUriChanged(newUri: string, oldUri: string): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsaveResults(requestParams: azdata.SaveResultsRequestParams): Thenable<azdata.SaveResultRequestResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsetQueryExecutionOptions(ownerUri: string, options: azdata.QueryExecutionOptions): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterOnQueryComplete(handler: (result: azdata.QueryExecuteCompleteNotificationResult) => any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterOnBatchStart(handler: (batchInfo: azdata.QueryExecuteBatchNotificationParams) => any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterOnBatchComplete(handler: (batchInfo: azdata.QueryExecuteBatchNotificationParams) => any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterOnResultSetAvailable(handler: (resultSetInfo: azdata.QueryExecuteResultSetNotificationParams) => any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterOnResultSetUpdated(handler: (resultSetInfo: azdata.QueryExecuteResultSetNotificationParams) => any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterOnMessage(handler: (message: azdata.QueryExecuteMessageParams) => any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcommitEdit(ownerUri: string): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcreateRow(ownerUri: string): Thenable<azdata.EditCreateRowResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdeleteRow(ownerUri: string, rowId: number): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tdisposeEdit(ownerUri: string): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tinitializeEdit(ownerUri: string, schemaName: string, objectName: string, objectType: string, rowLimit: number, queryString: string): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\trevertCell(ownerUri: string, rowId: number, columnId: number): Thenable<azdata.EditRevertCellResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\trevertRow(ownerUri: string, rowId: number): Thenable<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tupdateCell(ownerUri: string, rowId: number, columnId: number, newValue: string): Thenable<azdata.EditUpdateCellResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetEditRows(rowData: azdata.EditSubsetParams): Thenable<azdata.EditSubsetResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterOnEditSessionReady(handler: (ownerUri: string, success: boolean, message: string) => any): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\thandle?: number;\n\tproviderId: string = 'testProviderId';\n\n}\n\nexport interface ExtensionGlobalMemento extends vscode.Memento {\n\tsetKeysForSync(keys: string[]): void;\n}\n\nexport class TestExtensionContext implements vscode.ExtensionContext {\n\tstorageUri: vscode.Uri;\n\tglobalStorageUri: vscode.Uri;\n\tlogUri: vscode.Uri;\n\textensionMode: vscode.ExtensionMode;\n\tsubscriptions: { dispose(): any; }[];\n\tworkspaceState: vscode.Memento;\n\tglobalState: ExtensionGlobalMemento;\n\textensionUri: vscode.Uri;\n\textensionPath: string;\n\tenvironmentVariableCollection: vscode.EnvironmentVariableCollection;\n\tasAbsolutePath(relativePath: string): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tstoragePath: string;\n\tglobalStoragePath: string;\n\tlogPath: string;\n\tsecrets: vscode.SecretStorage;\n\textension: vscode.Extension<any>;\n}\n\nexport class TestImportDataModel implements ImportDataModel {\n\tserver: azdata.connection.Connection;\n\tserverId: string;\n\townerUri: string;\n\tproseColumns: ColumnMetadata[];\n\tproseDataPreview: string[][];\n\tdatabase: string;\n\ttable: string;\n\tschema: string;\n\tfilePath: string;\n\tfileType: string;\n\ttransPreviews: string[][];\n\toriginalProseColumns: ColumnMetadata[];\n\tderivedColumnName: string;\n\tnewFileSelected: boolean;\n}\n\nexport class TestFlatFileProvider implements FlatFileProvider {\n\tproviderId?: string;\n\tsendPROSEDiscoveryRequest(params: PROSEDiscoveryParams): Thenable<PROSEDiscoveryResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsendInsertDataRequest(params: InsertDataParams): Thenable<InsertDataResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsendGetColumnInfoRequest(params: GetColumnInfoParams): Thenable<GetColumnInfoResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsendChangeColumnSettingsRequest(params: ChangeColumnSettingsParams): Thenable<ChangeColumnSettingsResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsendLearnTransformationRequest(params: LearnTransformationParams): Thenable<LearnTransformationResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tsendSaveTransformationRequest(params: SaveTransformationParams): Thenable<SaveTransformationResponse> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n}\n\nexport function getAzureAccounts(): azdata.Account[] {\n\treturn [\n\t\t{\n\t\t\tisStale: false,\n\t\t\tkey: {\n\t\t\t\tproviderId: 'account1Provider',\n\t\t\t\taccountId: 'account1Id'\n\t\t\t},\n\t\t\tdisplayInfo: {\n\t\t\t\taccountType: 'account1Type',\n\t\t\t\tcontextualDisplayName: 'account1ContextualDisplayName',\n\t\t\t\tdisplayName: 'account1DisplayName',\n\t\t\t\tuserId: 'account1@microsoft.com'\n\t\t\t},\n\t\t\tproperties: {}\n\t\t},\n\t\t{\n\t\t\tisStale: false,\n\t\t\tkey: {\n\t\t\t\tproviderId: 'account2Provider',\n\t\t\t\taccountId: 'account2Id'\n\t\t\t},\n\t\t\tdisplayInfo: {\n\t\t\t\taccountType: 'account2Type',\n\t\t\t\tcontextualDisplayName: 'account2ContextualDisplayName',\n\t\t\t\tdisplayName: 'account2DisplayName',\n\t\t\t\tuserId: 'account2@microsoft.com'\n\t\t\t},\n\t\t\tproperties: {}\n\t\t},\n\t];\n}\n\n"]}