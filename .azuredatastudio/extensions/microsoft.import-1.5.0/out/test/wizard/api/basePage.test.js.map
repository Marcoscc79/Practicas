{"version":3,"file":"basePage.test.js","sourceRoot":"../../../../src","sources":["test/wizard/api/basePage.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as TypeMoq from 'typemoq';\nimport * as azdata from 'azdata';\nimport { FlatFileWizard } from '../../../wizard/flatFileWizard';\nimport { ImportDataModel } from '../../../wizard/api/models';\nimport { TestImportDataModel, ImportTestUtils } from '../../utils.test';\nimport { FileConfigPage } from '../../../wizard/pages/fileConfigPage';\nimport * as should from 'should';\nimport * as sinon from 'sinon';\n\ndescribe('Base page tests', function () {\n\n\tlet mockFlatFileWizard: TypeMoq.IMock<FlatFileWizard>;\n\tlet mockImportModel: TypeMoq.IMock<ImportDataModel>;\n\n\tbeforeEach(function () {\n\t\tmockFlatFileWizard = TypeMoq.Mock.ofType(FlatFileWizard, TypeMoq.MockBehavior.Loose, undefined, TypeMoq.It.isAny());\n\t\tmockImportModel = TypeMoq.Mock.ofType(TestImportDataModel, TypeMoq.MockBehavior.Loose);\n\t});\n\n\tafterEach(function (): void {\n\t\tsinon.restore();\n\t});\n\n\tit('getDatabaseValue returns active database first', async function () {\n\t\t// setting up the environment\n\t\tlet databases: string[] = ['testdb1', 'testdb2', 'testdb3'];\n\t\tlet activeDatabase: string = 'testdb2';\n\n\t\t// setting up mocks\n\t\tlet importPage = new FileConfigPage(mockFlatFileWizard.object, TypeMoq.It.isAny(), mockImportModel.object, TypeMoq.It.isAny(), TypeMoq.It.isAny());\n\t\tsinon.stub(azdata.connection, 'listDatabases').returns(Promise.resolve(databases));\n\t\tmockImportModel.object.server = {\n\t\t\tproviderName: 'MSSQL',\n\t\t\tconnectionId: 'testConnectionId',\n\t\t\toptions: {}\n\t\t};\n\t\tmockImportModel.object.database = activeDatabase;\n\n\t\t// Creating assert variables\n\t\tlet expectedDatabaseValues = [\n\t\t\t{ displayName: 'testdb2', name: 'testdb2' }, // This should be the first database as it is active in the extension.\n\t\t\t{ displayName: 'testdb1', name: 'testdb1' },\n\t\t\t{ displayName: 'testdb3', name: 'testdb3' }\n\t\t];\n\n\t\tlet actualDatabaseValues = await importPage.getDatabaseValues();\n\t\tshould(expectedDatabaseValues).deepEqual(actualDatabaseValues);\n\t});\n\n\tit('getServerValue returns null on no active connection', async function () {\n\n\t\tlet importPage = new FileConfigPage(mockFlatFileWizard.object, TypeMoq.It.isAny(), mockImportModel.object, TypeMoq.It.isAny(), TypeMoq.It.isAny());\n\n\t\t// mocking getActive connection to return null\n\t\tlet getActiveConnectionStub = sinon.stub(azdata.connection, 'getActiveConnections').returns(Promise.resolve(undefined));\n\n\t\tlet serverValues = await importPage.getServerValues();\n\n\t\t// getServer should be undefined for null active connections\n\t\tshould.equal(serverValues, undefined, 'getServer should be undefined for no active connections');\n\n\t\t// mocking getActive connection returns empty array\n\t\tgetActiveConnectionStub.returns(Promise.resolve([] as azdata.connection.Connection[]));\n\n\t\tserverValues = await importPage.getServerValues();\n\n\t\t// getServer should be undefined for empty active connections\n\t\tshould.equal(serverValues, undefined, 'getServer should be undefined for empty active conections');\n\t});\n\n\tit('getServerValue return active server value first', async function () {\n\t\t// settign up the enviornment\n\t\tlet testActiveConnections: azdata.connection.Connection[] = [\n\t\t\t{\n\t\t\t\tproviderName: 'MSSQL',\n\t\t\t\tconnectionId: 'testConnection1Id',\n\t\t\t\toptions: {\n\t\t\t\t\tuser: 'testcon1user',\n\t\t\t\t\tserver: 'testcon1server'\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tproviderName: 'MSSQL',\n\t\t\t\tconnectionId: 'testConnection2Id',\n\t\t\t\toptions: {\n\t\t\t\t\tuser: 'testcon2user',\n\t\t\t\t\tserver: 'testcon2server'\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tproviderName: 'PGSQL',\n\t\t\t\tconnectionId: 'testConnection3Id',\n\t\t\t\toptions: {\n\t\t\t\t\tuser: null, // setting it null to check if function return user as 'default\n\t\t\t\t\tserver: 'testcon3server'\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\tlet importPage = new FileConfigPage(mockFlatFileWizard.object, TypeMoq.It.isAny(), mockImportModel.object, TypeMoq.It.isAny(), TypeMoq.It.isAny());\n\t\tsinon.stub(azdata.connection, 'getActiveConnections').returns(Promise.resolve(testActiveConnections));\n\t\tmockImportModel.object.server = ImportTestUtils.getTestServer();\n\n\t\t// the second connection should be the first element in the array as it is active\n\t\tlet expectedConnectionValues = [\n\t\t\t{\n\t\t\t\tconnection: testActiveConnections[1],\n\t\t\t\tdisplayName: 'testcon2server (testcon2user)',\n\t\t\t\tname: 'testConnection2Id'\n\t\t\t},\n\t\t\t{\n\t\t\t\tconnection: testActiveConnections[0],\n\t\t\t\tdisplayName: 'testcon1server (testcon1user)',\n\t\t\t\tname: 'testConnection1Id'\n\t\t\t},\n\t\t\t{\n\t\t\t\tconnection: testActiveConnections[2],\n\t\t\t\tdisplayName: 'testcon3server (default)',\n\t\t\t\tname: 'testConnection3Id'\n\t\t\t}\n\t\t];\n\t\tlet actualConnectionValues = await importPage.getServerValues();\n\t\tshould(expectedConnectionValues).deepEqual(actualConnectionValues);\n\n\t});\n});\n"]}