{"version":3,"file":"flatFileWizard.test.js","sourceRoot":"../../../src","sources":["test/wizard/flatFileWizard.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as TypeMoq from 'typemoq';\nimport * as vscode from 'vscode';\nimport * as azdata from 'azdata';\nimport { FlatFileWizard } from '../../wizard/flatFileWizard';\nimport { ImportTestUtils } from '../utils.test';\nimport * as should from 'should';\nimport * as sinon from 'sinon';\n\ndescribe('import extension flat file wizard', function () {\n\tlet showErrorMessageSpy: sinon.SinonSpy;\n\n\tthis.beforeEach(function() {\n\t\tshowErrorMessageSpy = sinon.spy(vscode.window, 'showErrorMessage');\n\t});\n\n\tthis.afterEach(function () {\n\t\tsinon.restore();\n\t});\n\n\tit('opens connectionDialog when there are no active connections', async function () {\n\t\tlet testConnection: azdata.connection.Connection = {\n\t\t\tproviderName: 'MSSQL',\n\t\t\tconnectionId: 'testConnectionId',\n\t\t\toptions: {}\n\t\t};\n\n\t\t// There is no current connection.\n\t\tsinon.stub(azdata.connection, 'getCurrentConnection').returns(undefined);\n\n\t\t// openConnectionDialog returns a test connection\n\t\tlet openConnectionDialogSpy = sinon.stub(azdata.connection, 'openConnectionDialog').returns(Promise.resolve(testConnection));\n\n\t\tlet testFlatFileWizard = new FlatFileWizard(TypeMoq.It.isAny());\n\n\t\tawait testFlatFileWizard.getConnectionId();\n\n\t\t// openConnectionDialog will be called once\n\t\tsinon.assert.calledOnce(openConnectionDialogSpy);\n\t});\n\n\tit('shows error message when an invalid connection is selected', async function () {\n\t\t// The active connection doesn't have a valid Provider\n\t\tlet testConnectionProfile: azdata.connection.ConnectionProfile = ImportTestUtils.getTestConnectionProfile();\n\t\tsinon.stub(azdata.connection, 'getCurrentConnection').returns(Promise.resolve(testConnectionProfile));\n\t\tsinon.stub(azdata.connection, 'openConnectionDialog').returns(undefined);\n\n\t\tlet testFlatFileWizard = new FlatFileWizard(TypeMoq.It.isAny());\n\n\t\tawait testFlatFileWizard.getConnectionId();\n\n\t\tsinon.assert.calledOnce(showErrorMessageSpy);\n\n\t});\n\n\tit('shows error message when no connection is selected', async function () {\n\t\t// The active connection doesn't have a valid Provider\n\t\tsinon.stub(azdata.connection, 'getCurrentConnection').returns(Promise.resolve(undefined));\n\t\tsinon.stub(azdata.connection, 'openConnectionDialog').returns(undefined);\n\n\t\tlet testFlatFileWizard = new FlatFileWizard(TypeMoq.It.isAny());\n\n\t\tawait testFlatFileWizard.getConnectionId();\n\n\t\tsinon.assert.calledOnce(showErrorMessageSpy);\n\t});\n\n\tit('getConnection returns active connection', async function () {\n\t\tlet testConnectionProfile = ImportTestUtils.getTestConnectionProfile();\n\t\ttestConnectionProfile.providerId = 'MSSQL';\n\n\t\t//mocking an active connection\n\t\tsinon.stub(azdata.connection, 'getCurrentConnection').returns(Promise.resolve(testConnectionProfile));\n\n\t\tlet testFlatFileWizard = new FlatFileWizard(TypeMoq.It.isAny());\n\n\t\t//getConnectionID should return the connectionId of active connection\n\t\tlet connectionId = await testFlatFileWizard.getConnectionId();\n\t\tshould(connectionId).equals(testConnectionProfile.connectionId);\n\t});\n\n\tit('should initialize all pages', async function () {\n\t\tlet testConnectionProfile = ImportTestUtils.getTestConnectionProfile();\n\t\ttestConnectionProfile.providerId = 'MSSQL';\n\n\t\tsinon.stub(azdata.connection, 'getCurrentConnection').returns(Promise.resolve(testConnectionProfile));\n\n\t\tlet testProvider = {\n\t\t\tproviderId: 'testProviderId',\n\t\t\tconnectionProfile: ImportTestUtils.getTestConnectionProfile()\n\t\t};\n\n\t\tlet testFlatFileWizard = new FlatFileWizard(TypeMoq.It.isAny());\n\n\t\tawait testFlatFileWizard.start(testProvider);\n\n\t\t// asserting all wizard pages are getting created\n\t\tshould.notEqual(testFlatFileWizard.wizard, undefined);\n\t\tshould.notEqual(testFlatFileWizard.page1, undefined);\n\t\tshould.notEqual(testFlatFileWizard.page2, undefined);\n\t\tshould.notEqual(testFlatFileWizard.page3, undefined);\n\t\tshould.notEqual(testFlatFileWizard.page4, undefined);\n\n\t\tlet expectedPages = [\n\t\t\ttestFlatFileWizard.page1,\n\t\t\ttestFlatFileWizard.page2,\n\t\t\ttestFlatFileWizard.page3,\n\t\t\ttestFlatFileWizard.page4\n\t\t];\n\t\tshould.deepEqual(testFlatFileWizard.wizard.pages, expectedPages);\n\n\t});\n});\n"]}