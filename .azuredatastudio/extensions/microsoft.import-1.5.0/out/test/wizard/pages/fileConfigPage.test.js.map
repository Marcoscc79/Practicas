{"version":3,"file":"fileConfigPage.test.js","sourceRoot":"../../../../src","sources":["test/wizard/pages/fileConfigPage.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as TypeMoq from 'typemoq';\nimport * as azdata from 'azdata';\nimport { FlatFileWizard } from '../../../wizard/flatFileWizard';\nimport { ImportDataModel } from '../../../wizard/api/models';\nimport { TestImportDataModel, TestQueryProvider } from '../../utils.test';\nimport { FileConfigPage } from '../../../wizard/pages/fileConfigPage';\nimport * as should from 'should';\nimport * as sinon from 'sinon';\nimport { ImportPage } from '../../../wizard/api/importPage';\nimport * as constants from '../../../common/constants';\n\ndescribe('File config page', function () {\n\n\tlet mockFlatFileWizard: TypeMoq.IMock<FlatFileWizard>;\n\tlet mockImportModel: TypeMoq.IMock<ImportDataModel>;\n\n\tlet fileConfigPage: FileConfigPage;\n\tlet wizard: azdata.window.Wizard;\n\tlet page: azdata.window.WizardPage;\n\tlet pages: Map<number, ImportPage> = new Map<number, ImportPage>();\n\n\tthis.beforeEach(function () {\n\t\tmockFlatFileWizard = TypeMoq.Mock.ofType(FlatFileWizard, TypeMoq.MockBehavior.Loose, undefined, TypeMoq.It.isAny());\n\t\tmockImportModel = TypeMoq.Mock.ofType(TestImportDataModel, TypeMoq.MockBehavior.Loose);\n\n\t\twizard = azdata.window.createWizard(constants.wizardNameText);\n\t\tpage = azdata.window.createWizardPage(constants.page1NameText);\n\t});\n\n\tafterEach(function (): void {\n\t\tsinon.restore();\n\t});\n\n\tit('getSchema returns active schema first', async function () {\n\n\t\tlet mockQueryProvider = TypeMoq.Mock.ofType(TestQueryProvider);\n\n\t\t// mock result for the schema query\n\t\tlet schemaQueryResult: azdata.SimpleExecuteResult = {\n\t\t\trowCount: 3,\n\t\t\trows: [\n\t\t\t\t[\n\t\t\t\t\t{ displayValue: 'schema1', isNull: false, invariantCultureDisplayValue: 'schema1' }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ displayValue: 'schema2', isNull: false, invariantCultureDisplayValue: 'schema2' }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ displayValue: 'schema3', isNull: false, invariantCultureDisplayValue: 'schema3' }\n\t\t\t\t]\n\t\t\t],\n\t\t\tcolumnInfo: undefined\n\t\t};\n\n\t\t// setting the default schema for the current connection. This schema should be the first value in the dropdown array\n\t\tmockImportModel.object.schema = 'schema2';\n\n\t\t// expected schema values for the dropdown that will be created\n\t\tlet expectedSchemaValues = [\n\t\t\t{ displayName: 'schema2', name: 'schema2' }, // This should be the first database as it is active in the extension.\n\t\t\t{ displayName: 'schema1', name: 'schema1' },\n\t\t\t{ displayName: 'schema3', name: 'schema3' }\n\t\t];\n\n\t\t// creating a mock connection\n\t\tmockImportModel.object.server = {\n\t\t\tproviderName: 'MSSQL',\n\t\t\tconnectionId: 'testConnectionId',\n\t\t\toptions: {}\n\t\t};\n\n\t\t// setting up mocks to return test objects created earlier\n\t\tmockQueryProvider.setup(x => x.runQueryAndReturn(TypeMoq.It.isAny(), TypeMoq.It.isAny())).returns(async () => { return schemaQueryResult; });\n\t\tsinon.stub(azdata.dataprotocol, 'getProvider' ).returns(mockQueryProvider.object);\n\n\t\tlet fileConfigPage = new FileConfigPage(mockFlatFileWizard.object, TypeMoq.It.isAny(), mockImportModel.object, TypeMoq.It.isAny(), TypeMoq.It.isAny());\n\t\tlet actualSchemaValues = await fileConfigPage.getSchemaValues();\n\n\t\tshould(expectedSchemaValues).deepEqual(actualSchemaValues);\n\t});\n\n\tit('checking if all components are initialized properly', async function () {\n\n\t\tawait new Promise<void>(function (resolve) {\n\t\t\tpage.registerContent(async (view) => {\n\t\t\t\tfileConfigPage = new FileConfigPage(mockFlatFileWizard.object, page, mockImportModel.object, view, TypeMoq.It.isAny());\n\t\t\t\tpages.set(1, fileConfigPage);\n\t\t\t\tawait fileConfigPage.start();\n\t\t\t\tresolve();\n\n\t\t\t});\n\t\t\twizard.generateScriptButton.hidden = true;\n\n\t\t\twizard.pages = [page];\n\t\t\twizard.open();\n\t\t});\n\n\t\t// checking if all the required components are correctly initialized\n\t\tshould.notEqual(fileConfigPage.serverDropdown, undefined, 'serverDropdown should not be undefined');\n\t\tshould.notEqual(fileConfigPage.databaseDropdown, undefined, 'databaseDropdown should not be undefined');\n\t\tshould.notEqual(fileConfigPage.fileTextBox, undefined, 'fileTextBox should not be undefined');\n\t\tshould.notEqual(fileConfigPage.fileButton, undefined, 'fileButton should not be undefined');\n\t\tshould.notEqual(fileConfigPage.tableNameTextBox, undefined, 'tableNameTextBox should not be undefined');\n\t\tshould.notEqual(fileConfigPage.schemaDropdown, undefined, 'schemaDropdown should not be undefined');\n\t\tshould.notEqual(fileConfigPage.form, undefined, 'form should not be undefined');\n\t\tshould.notEqual(fileConfigPage.schemaLoader, undefined, 'schemaLoader should not be undefined');\n\n\t\tawait fileConfigPage.onPageLeave();\n\t\tawait fileConfigPage.cleanup();\n\t});\n\n\tit('Dropdown values are correctly set', async function () {\n\n\t\twizard = azdata.window.createWizard(constants.wizardNameText);\n\t\tpage = azdata.window.createWizardPage(constants.page1NameText);\n\n\t\t// creating mock server values\n\t\tlet testActiveConnections: azdata.connection.Connection[] = [\n\t\t\t{\n\t\t\t\tproviderName: 'MSSQL',\n\t\t\t\tconnectionId: 'testConnection1Id',\n\t\t\t\toptions: {\n\t\t\t\t\tuser: 'testcon1user',\n\t\t\t\t\tserver: 'testcon1server',\n\t\t\t\t\tdatabase: 'testdb1'\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tproviderName: 'MSSQL',\n\t\t\t\tconnectionId: 'testConnection2Id',\n\t\t\t\toptions: {\n\t\t\t\t\tuser: 'testcon2user',\n\t\t\t\t\tserver: 'testcon2server',\n\t\t\t\t\tdatabase: 'testdb2'\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tproviderName: 'PGSQL',\n\t\t\t\tconnectionId: 'testConnection3Id',\n\t\t\t\toptions: {\n\t\t\t\t\tserver: 'testcon3server',\n\t\t\t\t\tdatabase: 'testdb3'\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t\tsinon.stub(azdata.connection, 'getActiveConnections').returns(Promise.resolve(testActiveConnections));\n\n\t\t// creating a test active connection. This connection will be the first value in server dropdown array\n\t\tlet testServerConnection: azdata.connection.Connection = {\n\t\t\tproviderName: 'MSSQL',\n\t\t\tconnectionId: 'testConnection2Id',\n\t\t\toptions: {\n\t\t\t\t// default database. This database will be the first value in the database dropdown\n\t\t\t\tdatabase: 'testdb2',\n\t\t\t\tuser: 'testcon2user',\n\t\t\t\tserver: 'testcon2server'\n\t\t\t}\n\t\t};\n\t\tmockImportModel.object.server = testServerConnection;\n\t\tmockImportModel.object.server.options = testServerConnection.options;\n\n\t\t// expected values for the server dropdown\n\t\tlet expectedConnectionValues = [\n\t\t\t{\n\t\t\t\tconnection: testActiveConnections[1],\n\t\t\t\tdisplayName: 'testcon2server (testcon2user)',\n\t\t\t\tname: 'testConnection2Id'\n\t\t\t},\n\t\t\t{\n\t\t\t\tconnection: testActiveConnections[0],\n\t\t\t\tdisplayName: 'testcon1server (testcon1user)',\n\t\t\t\tname: 'testConnection1Id'\n\t\t\t},\n\t\t\t{\n\t\t\t\tconnection: testActiveConnections[2],\n\t\t\t\tdisplayName: 'testcon3server (default)',\n\t\t\t\tname: 'testConnection3Id'\n\t\t\t}\n\t\t];\n\n\t\t//  creating mock database values\n\t\tlet databases: string[] = ['testdb1', 'testdb2', 'testdb3'];\n\t\tsinon.stub(azdata.connection, 'listDatabases').returns(Promise.resolve(databases));\n\t\tmockImportModel.object.database = 'testdb2';\n\n\t\t// expected values for the database dropdown\n\t\tlet expectedDatabaseDropdownValues = [\n\t\t\t{\n\t\t\t\tdisplayName: 'testdb2',\n\t\t\t\tname: 'testdb2'\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'testdb1',\n\t\t\t\tname: 'testdb1'\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'testdb3',\n\t\t\t\tname: 'testdb3'\n\t\t\t}\n\t\t];\n\n\t\t// mock result for the schema query\n\t\tlet schemaQueryResult: azdata.SimpleExecuteResult = {\n\t\t\trowCount: 3,\n\t\t\trows: [\n\t\t\t\t[\n\t\t\t\t\t{ displayValue: 'schema1', isNull: false, invariantCultureDisplayValue: 'schema1' }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ displayValue: 'schema2', isNull: false, invariantCultureDisplayValue: 'schema2' }\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t{ displayValue: 'schema3', isNull: false, invariantCultureDisplayValue: 'schema3' }\n\t\t\t\t]\n\t\t\t],\n\t\t\tcolumnInfo: undefined\n\t\t};\n\t\tmockImportModel.object.schema = 'schema2';\n\n\t\t// expected values for the schema dropdown\n\t\tlet expectedSchemaValues = [\n\t\t\t{ displayName: 'schema2', name: 'schema2' }, // This should be the first database as it is active in the extension.\n\t\t\t{ displayName: 'schema1', name: 'schema1' },\n\t\t\t{ displayName: 'schema3', name: 'schema3' }\n\t\t];\n\n\t\tconst testQueryProvider = new TestQueryProvider();\n\t\tsinon.stub(azdata.dataprotocol, 'getProvider').returns(testQueryProvider);\n\t\tsinon.stub(testQueryProvider, 'runQueryAndReturn').resolves(schemaQueryResult);\n\n\t\tawait new Promise<void>(function (resolve) {\n\t\t\tpage.registerContent(async (view) => {\n\t\t\t\tfileConfigPage = new FileConfigPage(mockFlatFileWizard.object, page, mockImportModel.object, view, TypeMoq.It.isAny());\n\t\t\t\tpages.set(1, fileConfigPage);\n\t\t\t\tawait fileConfigPage.start();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\twizard.generateScriptButton.hidden = true;\n\n\t\t\twizard.pages = [page];\n\t\t\twizard.open();\n\t\t});\n\n\n\t\tawait fileConfigPage.onPageEnter();\n\n\t\tshould.deepEqual(fileConfigPage.serverDropdown.value, expectedConnectionValues[0], 'Server dropdown value was incorrect');\n\t\tshould.deepEqual(fileConfigPage.serverDropdown.values, expectedConnectionValues, 'Server dropdown values were incorrect');\n\t\tshould.deepEqual(fileConfigPage.databaseDropdown.value, expectedDatabaseDropdownValues[0], 'Database dropdown value was incorrect');\n\t\tshould.deepEqual(fileConfigPage.databaseDropdown.values, expectedDatabaseDropdownValues, 'Database dropdown values were incorrect');\n\t\tshould.deepEqual(fileConfigPage.schemaDropdown.value, expectedSchemaValues[0], 'Schema dropdown value was incorrect');\n\t\tshould.deepEqual(fileConfigPage.schemaDropdown.values, expectedSchemaValues, 'Schema dropdown values were incorrect');\n\t});\n});\n"]}