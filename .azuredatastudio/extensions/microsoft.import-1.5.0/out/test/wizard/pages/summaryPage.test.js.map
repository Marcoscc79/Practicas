{"version":3,"file":"summaryPage.test.js","sourceRoot":"../../../../src","sources":["test/wizard/pages/summaryPage.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as TypeMoq from 'typemoq';\nimport * as azdata from 'azdata';\nimport * as sinon from 'sinon';\nimport * as constants from '../../../common/constants';\nimport { FlatFileWizard } from '../../../wizard/flatFileWizard';\nimport * as should from 'should';\nimport { ColumnMetadata, ImportDataModel } from '../../../wizard/api/models';\nimport { TestImportDataModel, TestFlatFileProvider, getAzureAccounts } from '../../utils.test';\nimport { ImportPage } from '../../../wizard/api/importPage';\nimport { SummaryPage } from '../../../wizard/pages/summaryPage';\nimport { FlatFileProvider, InsertDataResponse } from '../../../services/contracts';\n\ndescribe('import extension summary page tests', function () {\n\n\tlet mockFlatFileWizard: TypeMoq.IMock<FlatFileWizard>;\n\tlet mockImportModel: TypeMoq.IMock<ImportDataModel>;\n\tlet mockFlatFileProvider: TypeMoq.IMock<FlatFileProvider>;\n\n\tlet summaryPage: SummaryPage;\n\tlet wizard: azdata.window.Wizard;\n\tlet page: azdata.window.WizardPage;\n\tlet pages: Map<number, ImportPage> = new Map<number, ImportPage>();\n\n\tbeforeEach(async function () {\n\n\t\tmockFlatFileProvider = TypeMoq.Mock.ofType(TestFlatFileProvider);\n\t\tmockFlatFileWizard = TypeMoq.Mock.ofType(FlatFileWizard, TypeMoq.MockBehavior.Loose, undefined, mockFlatFileProvider.object);\n\t\tmockImportModel = TypeMoq.Mock.ofType(TestImportDataModel, TypeMoq.MockBehavior.Loose);\n\n\t\twizard = azdata.window.createWizard(constants.wizardNameText);\n\t\tpage = azdata.window.createWizardPage(constants.page4NameText);\n\n\t\tsinon.stub(azdata.accounts, 'getAllAccounts').returns(Promise.resolve(getAzureAccounts()));\n\n\t\tsinon.stub(azdata.accounts, 'getAccountSecurityToken').returns(Promise.resolve({\n\t\t\ttoken: 'azureToken',\n\t\t\ttokenType: 'token'\n\t\t}));\n\t\tsinon.stub(azdata.connection, 'getConnectionString').returns(Promise.resolve('testConnectionString'));\n\t});\n\n\tthis.afterEach(async () => {\n\t\tsinon.restore();\n\t});\n\n\tit('checking if all components are initialized properly', async function () {\n\n\t\tawait new Promise<void>(function (resolve) {\n\t\t\tpage.registerContent(async (view) => {\n\t\t\t\tsummaryPage = new SummaryPage(mockFlatFileWizard.object, page, mockImportModel.object, view, TypeMoq.It.isAny());\n\t\t\t\tpages.set(1, summaryPage);\n\t\t\t\tawait summaryPage.start();\n\t\t\t\tresolve();\n\n\t\t\t});\n\t\t\twizard.generateScriptButton.hidden = true;\n\n\t\t\twizard.pages = [page];\n\t\t\twizard.open();\n\t\t});\n\n\t\t// checking if all the required components are correctly initialized\n\t\tshould.notEqual(summaryPage.table, undefined, 'table should not be undefined');\n\t\tshould.notEqual(summaryPage.statusText, undefined, 'statusText should not be undefined');\n\t\tshould.notEqual(summaryPage.loading, undefined, 'loading should not be undefined');\n\t\tshould.notEqual(summaryPage.form, undefined, 'form should not be undefined');\n\n\t\tawait summaryPage.onPageLeave();\n\t\tawait summaryPage.cleanup();\n\n\t});\n\n\tit('handle import updates status Text correctly', async function () {\n\n\t\t// Creating a test Connection\n\t\tlet testServerConnection: azdata.connection.Connection = {\n\t\t\tproviderName: 'testProviderName',\n\t\t\tconnectionId: 'testConnectionId',\n\t\t\toptions: {}\n\t\t};\n\n\n\t\t// setting up connection objects in model\n\t\tmockImportModel.object.server = testServerConnection;\n\t\tmockImportModel.object.database = 'testDatabase';\n\t\tmockImportModel.object.schema = 'testSchema';\n\t\tmockImportModel.object.filePath = 'testFilePath';\n\n\t\t// Creating test columns\n\t\tlet testProseColumns = [\n\t\t\t{\n\t\t\t\tcolumnName: 'column1',\n\t\t\t\tdataType: 'nvarchar(50)',\n\t\t\t\tprimaryKey: false,\n\t\t\t\tnullable: false\n\t\t\t},\n\t\t\t{\n\t\t\t\tcolumnName: 'column2',\n\t\t\t\tdataType: 'nvarchar(50)',\n\t\t\t\tprimaryKey: false,\n\t\t\t\tnullable: false\n\t\t\t}\n\t\t];\n\t\tmockImportModel.object.proseColumns = testProseColumns;\n\n\t\t// setting up a test table insert response from FlatFileProvider\n\t\tlet testSendInsertDataRequestResponse: InsertDataResponse = {\n\t\t\tresult: {\n\t\t\t\tsuccess: true,\n\t\t\t\terrorMessage: ''\n\t\t\t}\n\t\t};\n\t\tmockFlatFileProvider.setup(x => x.sendInsertDataRequest(TypeMoq.It.isAny())).returns(async () => { return testSendInsertDataRequestResponse; });\n\n\t\tawait new Promise<void>(function (resolve) {\n\t\t\tpage.registerContent(async (view) => {\n\t\t\t\tsummaryPage = new SummaryPage(mockFlatFileWizard.object, page, mockImportModel.object, view, mockFlatFileProvider.object);\n\t\t\t\tpages.set(1, summaryPage);\n\t\t\t\tawait summaryPage.start();\n\t\t\t\tsummaryPage.setupNavigationValidator();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\twizard.generateScriptButton.hidden = true;\n\n\t\t\twizard.pages = [page];\n\t\t\twizard.open();\n\t\t});\n\n\t\t// Entering the page. This method will try to create table using FlatFileProvider\n\t\tawait summaryPage.onPageEnter();\n\n\t\t// In case of success we should see the success message\n\t\tshould.equal(summaryPage.statusText.value, constants.updateText);\n\n\t\t// In case of a failure we should see the error message\n\t\ttestSendInsertDataRequestResponse = {\n\t\t\tresult: {\n\t\t\t\tsuccess: false,\n\t\t\t\terrorMessage: 'testError'\n\t\t\t}\n\t\t};\n\n\t\t// mocking the insertDataRequest to fail\n\t\tmockFlatFileProvider.setup(x => x.sendInsertDataRequest(TypeMoq.It.isAny())).returns(async () => { return testSendInsertDataRequestResponse; });\n\n\t\t// Entering the page. This method will try to create table using FlatFileProvider\n\t\tawait summaryPage.onPageEnter();\n\t\tshould.equal(summaryPage.statusText.value, constants.summaryErrorSymbol + 'testError');\n\n\t});\n\n\tit('Data is inserted with correct account access token in case of Azure MFA connections', async() => {\n\n\t\t// Creating a test AAD MFA connection\n\t\tlet testServerConnection: azdata.connection.Connection = {\n\t\t\tproviderName: 'testProviderName',\n\t\t\tconnectionId: 'testConnectionId',\n\t\t\toptions: {\n\t\t\t\tazureAccount: getAzureAccounts()[1].key.accountId,\n\t\t\t\tazureTenantId: 'azureAccount2Tenant',\n\t\t\t\tauthenticationType: 'AzureMFA'\n\t\t\t}\n\t\t};\n\n\t\t// Overriding the behavior of getAccountSecurityToken and making sure\n\t\t// it returns only when called with second azure test account and\n\t\t// azureTenantId from test connection.\n\t\t(<any>azdata.accounts)['getAccountSecurityToken'].restore();\n\t\tsinon.stub(azdata.accounts, 'getAccountSecurityToken')\n\t\t.withArgs(\n\t\t\tgetAzureAccounts()[1],\n\t\t\t'azureAccount2Tenant',\n\t\t\tsinon.match.any\n\t\t).returns(\n\t\t\tPromise.resolve({\n\t\t\ttoken: 'token2',\n\t\t\ttokenType: 'azureTokenType'\n\t\t}));\n\n\t\t// setting up connection objects in model\n\t\tmockImportModel.object.server = testServerConnection;\n\t\tmockImportModel.object.database = 'testDatabase';\n\t\tmockImportModel.object.schema = 'testSchema';\n\t\tmockImportModel.object.filePath = 'testFilePath';\n\n\n\t\tlet testSendInsertDataRequestResponse: InsertDataResponse = {\n\t\t\tresult: {\n\t\t\t\tsuccess: true,\n\t\t\t\terrorMessage: ''\n\t\t\t}\n\t\t};\n\n\t\t// Creating test columns\n\t\tlet testProseColumns: ColumnMetadata[] = [\n\t\t];\n\t\tmockImportModel.object.proseColumns = testProseColumns;\n\n\t\t// Creating a test request params with azure account 2 token\n\t\tlet testSendInsertDataRequest = {\n\t\t\tconnectionString: 'testConnectionString',\n\t\t\tbatchSize: 500,\n\t\t\tazureAccessToken: 'token2'\n\t\t};\n\n\t\tmockFlatFileProvider.setup(x => x.sendInsertDataRequest(testSendInsertDataRequest)).returns(async () => { return testSendInsertDataRequestResponse; });\n\n\t\tawait new Promise<void>(function (resolve) {\n\t\t\tpage.registerContent(async (view) => {\n\t\t\t\tsummaryPage = new SummaryPage(mockFlatFileWizard.object, page, mockImportModel.object, view, mockFlatFileProvider.object);\n\t\t\t\tpages.set(1, summaryPage);\n\t\t\t\tawait summaryPage.start();\n\t\t\t\tsummaryPage.setupNavigationValidator();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\twizard.generateScriptButton.hidden = true;\n\n\t\t\twizard.pages = [page];\n\t\t\twizard.open();\n\t\t});\n\n\t\tawait summaryPage.onPageEnter();\n\n\t\t// Verifying insert data request is called with expected parameters once.\n\t\tmockFlatFileProvider.verify(x => x.sendInsertDataRequest(testSendInsertDataRequest), TypeMoq.Times.once());\n\t});\n});\n"]}