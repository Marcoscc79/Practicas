{"version":3,"file":"basePage.js","sourceRoot":"../../../src","sources":["wizard/api/basePage.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as azdata from 'azdata';\nimport { ImportDataModel } from './models';\n\nexport abstract class BasePage {\n\n\tprotected readonly wizardPage: azdata.window.WizardPage;\n\tprotected readonly model: ImportDataModel;\n\tprotected readonly view: azdata.ModelView;\n\n\t/**\n\t * This method constructs all the elements of the page.\n\t */\n\tpublic abstract start(): Promise<boolean>;\n\n\t/**\n\t * This method is called when the user is entering the page.\n\t */\n\tpublic abstract onPageEnter(): Promise<boolean>;\n\n\t/**\n\t * This method is called when the user is leaving the page.\n\t */\n\tasync onPageLeave(): Promise<boolean> {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Override this method to cleanup what you don't need cached in the page.\n\t */\n\tpublic async cleanup(): Promise<boolean> {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Sets up a navigation validator.\n\t * This will be called right before onPageEnter().\n\t */\n\tpublic setupNavigationValidator(): void {\n\t}\n\n\tpublic async getServerValues(): Promise<{ connection: azdata.connection.Connection, displayName: string, name: string }[]> {\n\t\tlet cons = await azdata.connection.getActiveConnections();\n\t\t// This user has no active connections ABORT MISSION\n\t\tif (!cons || cons.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet count = -1;\n\t\tlet idx = -1;\n\n\n\t\tlet values = cons.map(c => {\n\t\t\t// Handle the code to remember what the user's choice was from before\n\t\t\tcount++;\n\t\t\tif (idx === -1) {\n\t\t\t\tif (this.model.server && c.connectionId === this.model.server.connectionId) {\n\t\t\t\t\tidx = count;\n\t\t\t\t} else if (this.model.serverId && c.connectionId === this.model.serverId) {\n\t\t\t\t\tidx = count;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet usr = c.options.user;\n\t\t\tlet srv = c.options.server;\n\n\t\t\tif (!usr) {\n\t\t\t\tusr = 'default';\n\t\t\t}\n\n\t\t\tlet finalName = `${srv} (${usr})`;\n\t\t\treturn {\n\t\t\t\tconnection: c,\n\t\t\t\tdisplayName: finalName,\n\t\t\t\tname: c.connectionId\n\t\t\t};\n\t\t});\n\n\t\tif (idx >= 0) {\n\t\t\tlet tmp = values[0];\n\t\t\tvalues[0] = values[idx];\n\t\t\tvalues[idx] = tmp;\n\t\t} else {\n\t\t\tthis.deleteServerValues();\n\t\t}\n\n\t\treturn values;\n\t}\n\n\tpublic async getDatabaseValues(): Promise<azdata.CategoryValue[]> {\n\t\tlet idx = -1;\n\t\tlet count = -1;\n\t\tlet values = (await azdata.connection.listDatabases(this.model.server.connectionId)).map(db => {\n\t\t\tcount++;\n\t\t\tif (this.model.database && db === this.model.database) {\n\t\t\t\tidx = count;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdisplayName: db,\n\t\t\t\tname: db\n\t\t\t};\n\t\t});\n\n\t\tif (idx >= 0) {\n\t\t\tlet tmp = values[0];\n\t\t\tvalues[0] = values[idx];\n\t\t\tvalues[idx] = tmp;\n\t\t}\n\t\treturn values;\n\t}\n\n\tprotected deleteServerValues() {\n\t\tdelete this.model.server;\n\t\tdelete this.model.serverId;\n\t\tdelete this.model.database;\n\t}\n}\n"]}