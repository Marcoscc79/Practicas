{"version":3,"file":"summaryPage.js","sourceRoot":"../../../src","sources":["wizard/pages/summaryPage.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the Source EULA. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as azdata from 'azdata';\n\nimport { ImportPage } from '../api/importPage';\nimport { InsertDataResponse } from '../../services/contracts';\nimport * as constants from '../../common/constants';\nimport { EOL } from 'os';\n\nexport class SummaryPage extends ImportPage {\n\tprivate _table: azdata.TableComponent;\n\tprivate _statusText: azdata.TextComponent;\n\tprivate _loading: azdata.LoadingComponent;\n\tprivate _form: azdata.FormContainer;\n\n\tpublic get table(): azdata.TableComponent {\n\t\treturn this._table;\n\t}\n\n\tpublic set table(table: azdata.TableComponent) {\n\t\tthis._table = table;\n\t}\n\n\tpublic get statusText(): azdata.TextComponent {\n\t\treturn this._statusText;\n\t}\n\n\tpublic set statusText(statusText: azdata.TextComponent) {\n\t\tthis._statusText = statusText;\n\t}\n\n\tpublic get loading(): azdata.LoadingComponent {\n\t\treturn this._loading;\n\t}\n\n\tpublic set loading(loading: azdata.LoadingComponent) {\n\t\tthis._loading = loading;\n\t}\n\n\tpublic get form(): azdata.FormContainer {\n\t\treturn this._form;\n\t}\n\n\tpublic set form(form: azdata.FormContainer) {\n\t\tthis._form = form;\n\t}\n\n\tasync start(): Promise<boolean> {\n\t\tthis.table = this.view.modelBuilder.table().component();\n\t\tthis.statusText = this.view.modelBuilder.text().withProps({\n\t\t\tCSSStyles: {\n\t\t\t\t'user-select': 'text',\n\t\t\t\t'font-size': '13px'\n\t\t\t}\n\t\t}).component();\n\t\tthis.loading = this.view.modelBuilder.loadingComponent().withItem(this.statusText).component();\n\n\t\tthis.form = this.view.modelBuilder.formContainer().withFormItems(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tcomponent: this.table,\n\t\t\t\t\ttitle: constants.importInformationText\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcomponent: this.loading,\n\t\t\t\t\ttitle: constants.importStatusText\n\t\t\t\t}\n\t\t\t]\n\t\t).component();\n\n\t\tawait this.view.initializeModel(this.form);\n\t\treturn true;\n\t}\n\n\tasync onPageEnter(): Promise<boolean> {\n\t\tthis.loading.loading = true;\n\t\tthis.populateTable();\n\t\tawait this.handleImport();\n\t\tthis.loading.loading = false;\n\t\tthis.instance.setImportAnotherFileVisibility(true);\n\n\t\treturn true;\n\t}\n\n\toverride async onPageLeave(): Promise<boolean> {\n\t\tthis.instance.setImportAnotherFileVisibility(false);\n\n\t\treturn true;\n\t}\n\n\tprivate populateTable() {\n\t\tthis.table.updateProperties({\n\t\t\tdata: [\n\t\t\t\t[constants.serverNameText, this.model.server.options.server],\n\t\t\t\t[constants.databaseText, this.model.database],\n\t\t\t\t[constants.tableNameText, this.model.table],\n\t\t\t\t[constants.tableSchemaText, this.model.schema],\n\t\t\t\t[constants.fileImportText, this.model.filePath]],\n\t\t\tcolumns: ['Object type', 'Name'],\n\t\t\twidth: 600,\n\t\t\theight: 200\n\t\t});\n\t}\n\n\tprivate async handleImport(): Promise<void> {\n\t\tlet i = 0;\n\t\tconst changeColumnSettingsErrors = [];\n\t\tfor (let val of this.model.proseColumns) {\n\t\t\tlet columnChangeParams = {\n\t\t\t\tindex: i++,\n\t\t\t\tnewName: val.columnName,\n\t\t\t\tnewDataType: val.dataType,\n\t\t\t\tnewNullable: val.nullable,\n\t\t\t\tnewInPrimaryKey: val.primaryKey\n\t\t\t};\n\t\t\tconst changeColumnResult = await this.provider.sendChangeColumnSettingsRequest(columnChangeParams);\n\t\t\tif (changeColumnResult?.result?.errorMessage) {\n\t\t\t\tchangeColumnSettingsErrors.push(changeColumnResult.result.errorMessage);\n\t\t\t}\n\t\t}\n\n\t\t// Stopping import if there are errors in change column setting.\n\t\tif (changeColumnSettingsErrors.length !== 0) {\n\t\t\tlet updateText: string;\n\t\t\tupdateText = changeColumnSettingsErrors.join(EOL);\n\t\t\tthis.statusText.updateProperties({\n\t\t\t\tvalue: updateText\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: InsertDataResponse;\n\t\tlet err;\n\n\t\tconst currentServer = this.model.server;\n\t\tconst includePasswordInConnectionString = (currentServer.options.authenticationType === 'Integrated') ? false : true;\n\t\tconst connectionString = await azdata.connection.getConnectionString(currentServer.connectionId, includePasswordInConnectionString);\n\n\t\tlet accessToken = undefined;\n\t\tif (currentServer.options.authenticationType === 'AzureMFA') {\n\t\t\tconst azureAccount = (await azdata.accounts.getAllAccounts()).filter(v => v.key.accountId === currentServer.options.azureAccount)[0];\n\t\t\taccessToken = (await azdata.accounts.getAccountSecurityToken(azureAccount, currentServer.options.azureTenantId, azdata.AzureResource.Sql)).token;\n\t\t}\n\n\t\ttry {\n\t\t\tresult = await this.provider.sendInsertDataRequest({\n\t\t\t\tconnectionString: connectionString,\n\t\t\t\t//TODO check what SSMS uses as batch size\n\t\t\t\tbatchSize: 500,\n\t\t\t\tazureAccessToken: accessToken\n\t\t\t});\n\t\t} catch (e) {\n\t\t\terr = e.toString();\n\t\t}\n\n\t\tlet updateText: string;\n\t\tif (!result || !result.result.success) {\n\t\t\tupdateText = constants.summaryErrorSymbol;\n\t\t\tif (!result) {\n\t\t\t\tupdateText += err;\n\t\t\t} else {\n\t\t\t\tupdateText += result.result.errorMessage;\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO: When sql statements are in, implement this.\n\t\t\t//let rows = await this.getCountRowsInserted();\n\t\t\t//if (rows < 0) {\n\t\t\tupdateText = constants.updateText;\n\t\t\t//} else {\n\t\t\t//updateText = localize('flatFileImport.success.rows', '✔ You have successfully inserted {0} rows.', rows);\n\t\t\t//}\n\t\t}\n\t\tthis.statusText.updateProperties({\n\t\t\tvalue: updateText\n\t\t});\n\t}\n\n\t// private async getCountRowsInserted(): Promise<Number> {\n\t// \tlet connectionUri = await azdata.connection.getUriForConnection(this.model.server.connectionId);\n\t// \tlet queryProvider = azdata.dataprotocol.getProvider<azdata.QueryProvider>(this.model.server.providerName, azdata.DataProviderType.QueryProvider);\n\t// \ttry {\n\t// \t\tlet query = sqlstring.format('USE ?; SELECT COUNT(*) FROM ?', [this.model.database, this.model.table]);\n\t// \t\tlet results = await queryProvider.runQueryAndReturn(connectionUri, query);\n\t// \t\tlet cell = results.rows[0][0];\n\t// \t\tif (!cell || cell.isNull) {\n\t// \t\t\treturn -1;\n\t// \t\t}\n\t// \t\tlet numericCell = Number(cell.displayValue);\n\t// \t\tif (isNaN(numericCell)) {\n\t// \t\t\treturn -1;\n\t// \t\t}\n\t// \t\treturn numericCell;\n\t// \t} catch (e) {\n\t// \t\treturn -1;\n\t// \t}\n\t// }\n}\n"]}